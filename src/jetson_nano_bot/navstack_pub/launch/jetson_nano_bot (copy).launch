<?xml version="1.0" encoding="UTF-8"?>

<launch>

  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
  <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 30" />
<!-- -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" /> 
 
  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <!-- map to odom will be provided by the AMCL -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />
	
  <!-- IMU Data Publisher Using the BNO055 IMU Sensor -->
  <!-- Publish: /imu/data -->
	<arg name="serial_port" default="/dev/ttyUSB0" />
	<arg name="frame_id" default="imu_link" />
	<arg name="operation_mode" default="IMU"/>
	<arg name="reset_orientation" default="true" />
	<arg name="frequency" default="50" /> 
	<arg name="use_magnetometer" default="false" />
	<arg name="use_temperature" default="false" /> 
  <node pkg="ros_imu_bno055" name="imu_node" type="imu_ros.py" respawn="true" respawn_delay="2">
        <param name="serial_port" value="$(arg serial_port)" />
        <param name="frame_id" value="$(arg frame_id)" />
        <param name="operation_mode" value="$(arg operation_mode)" />
        <param name="reset_orientation" value = "$(arg reset_orientation)" />
        <param name="frequency" value="$(arg frequency)" />
        <param name="use_magnetometer" value="$(arg use_magnetometer)" />    
        <param name="use_temperature" value="$(arg use_temperature)" />   
  </node>

  <!-- GPS Data Publisher Using the UBLOX -->
  <!-- Publish: 
	/ublox/aidalm
	/ublox/aideph
	/ublox/fix
	/ublox/fix_velocity
	/ublox/monhw
	/ublox/navclock
	/ublox/navpvt
	/ublox/navstatus
	/ublox/navsvinfo
	 -->
  <arg name="node_name"           doc="UBLOX Node"
                                  default="ublox" />
  <arg name="output"              default="screen" />
  <arg name="respawn"             default="true" />
  <arg name="respawn_delay"       default="30" />
  <arg name="clear_params"        default="true" />

  <node pkg="ublox_gps" type="ublox_gps" name="$(arg node_name)"
        output="$(arg output)"
        clear_params="$(arg clear_params)"
        respawn="$(arg respawn)"
        respawn_delay="$(arg respawn_delay)">
    <rosparam command="load"
              file="/home/robo3000/catkin_ws/src/ublox/ublox_gps/config/c94_m8p_base.yaml" />
  </node>

  <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino --> 
  <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  <!-- Subscribe: /cmd_vel -->
  <!-- Publish: /right_ticks, /left_ticks -->
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyACM1"/>
    <param name="baud" value="115200"/>
  </node>
 
  <!-- Wheel Odometry Publisher -->
  <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
  <!-- Publish: /odom_data_euler, /odom_data_quat -->
  <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
  </node> 


  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <!-- changed "base_footprint" to ?
  <remap from="odom" to="odom_data_quat" />
  <remap from="imu_data" to="imu/data" /> 
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="5.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>
-->

<!-- Start rviz -->
<node pkg="rviz" type="rviz" name="rviz">
</node>
<!-- Subscribe: /initialpose, /move_base_simple/goal -->
<!-- Publish: /initial_2d, /goal_2d -->
<node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
</node> 

<!-- NavSat Transform 
<node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" output="screen">
	<param name="magnetic_declination_radians" value="0"/> 
	<param name="yaw_offset" value="0"/>
	<param name="zero_altitude" value="false"/> 
	<param name="broadcast_utm_transform" value="true"/>
	<param name="publish_filtered_gps" value="true"/>

	<remap from="imu/data" to="android/imu" />
	<remap from="gps/fix" to="android/gps" />
	<remap from="/odometry/filtered" to="odometry/filtered/global"/>
</node>
-->
  <!--   <node name="rviz" pkg="rviz" type="rviz" args="-d $(find ros_imu_bno055)/utils/view_imu_rviz.rviz" />-->

</launch>
